{"version":3,"sources":["components/TaskForm.tsx","components/TaskEditModal.tsx","components/TaskListItem.tsx","components/TaskList.tsx","components/TaskSearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskForm","props","useState","name","tags_attributes","state","validationSchema","Yup","shape","required","formik","useFormik","initialValues","onSubmit","values","resetForm","app","axios","post","task","then","result","addTask","data","setFieldValue","catch","console","log","handleSubmit","Grid","container","spacing","item","xs","InputLabel","TextField","id","variant","size","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","map","tag","onAdd","chip","tags","push","handleAddChip","onDelete","index","splice","handleDeleteChip","Button","color","type","useStyles","makeStyles","theme","paper","position","width","height","backgroundColor","border","boxShadow","shadows","padding","TaskEditModal","classes","modalStyle","top","left","transform","patch","results","updateTask","body","style","className","Box","mb","justifyContent","justify","onClick","onClose","Modal","open","TaskListItem","editFormOpen","handleEditFormOpen","bind","handleEditFormClose","this","setState","event","preventDefault","delete","removeTask","Chip","ListItem","button","ListItemText","primary","handleTaskDelete","React","Component","TaskList","List","filtered_tasks","TaskSearchBar","keyword","setKeyWord","handleSearch","tasks","slice","filter","hasMatchingTag","setFilteredTasks","some","toLowerCase","includes","newValue","onCancelSearch","App","setTasks","targetTask","targetIndex","findIndex","get","require","create","baseURL","process","headers","responseType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41c80f6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { Task, Tag } from './Types'\nimport ChipInput from 'material-ui-chip-input'\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\n\ninterface TaskFormProps {\n  app: App\n}\n\nfunction TaskForm(props: TaskFormProps) {\n  const tags : Tag[] = []\n  const [state, setState] = useState({\n      name: \"\",\n      tags_attributes: tags\n  })\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .required('Name is required'),\n  })\n\n  const handleSubmit = (values: any, {resetForm}: any) => {\n      props.app.axios.post(\"/tasks\", {\n          task: values,\n      })\n          .then((result: any) => {\n              // update tasks in App component\n              props.app.addTask(result.data)\n              // set input value back to null\n              resetForm()\n              const tags : Tag[] = []\n              formik.setFieldValue(\"tags_attributes\", tags, true)\n          })\n          .catch((data: any) => {\n              console.log(data)\n          })\n  }\n\n  const formik = useFormik({\n    initialValues: state,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  })\n\n  const handleAddChip = (chip: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.push({name: chip})\n    // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n    console.log(formik.values)\n  }\n  const handleDeleteChip = (chip: any, index: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.splice(index, 1)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n  }\n\n  return (\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <InputLabel>Your todo:</InputLabel>\n            </Grid>\n\n            <Grid item xs={12}>\n              <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                name=\"name\" label=\"Task Name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <ChipInput label=\"Tags\"\n                value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                onAdd={chip => handleAddChip(chip)}\n                onDelete={(chip, index) => handleDeleteChip(chip, index)}\n              />\n              {/*<Chip label=\"Add tag\" color=\"primary\" clickable/>*/}\n            </Grid>\n\n            <Grid item xs={12}>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" >\n                Create new task\n              </Button>\n            </Grid>\n        </Grid>\n      </form>\n    )\n}\n\nexport default TaskForm;\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ChipInput from 'material-ui-chip-input'\nimport Box from '@material-ui/core/Box';\nimport { Task } from './Types'\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    {/*const top = 50 + rand();\n    const left = 50 + rand();*/}\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 500,\n        height: 500,\n        backgroundColor: \"#d9ded9\",\n        border: '0.5px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\ninterface TaskEditModalProps {\n  open: boolean\n  onClose: any\n  task: Task\n  app: App\n}\n\nfunction TaskEditModal(props: TaskEditModalProps) {\n    const classes = useStyles();\n    const modalStyle = getModalStyle();\n    const [state, setState] = useState({\n      name: props.task.name,\n      tags_attributes: props.task.tags\n    })\n\n    const validationSchema = Yup.object().shape({\n      name: Yup.string()\n          .required('Name is required'),\n    });\n\n\n    const handleSubmit = (values: any, {resetForm}: any) => {\n          props.app.axios.patch(`/tasks/${props.task.id}`, {\n              task: values\n          })\n              .then((results: any) => {\n                  // update tasks in app\n                  props.app.updateTask(results.data)\n              })\n              .catch((data: any) => {\n                  console.log(data);\n              })\n    }\n\n    const formik = useFormik({\n      initialValues: state,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit\n    })\n\n    const handleAddChip = (chip: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.push({name: chip})\n      // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n      console.log(formik.values)\n    }\n    const handleDeleteChip = (chip: any, index: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.splice(index, 1)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n    }\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <form onSubmit={formik.handleSubmit}>\n                <Box mb={4} justifyContent=\"center\">\n                    <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                      name=\"name\" label=\"Task Name\"\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                      error={formik.touched.name && Boolean(formik.errors.name)}\n                      helperText={formik.touched.name && formik.errors.name}\n                    />\n                </Box>\n\n                <Grid item xs={12}>\n                  <ChipInput label=\"Tags\"\n                    value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                    onAdd={chip => handleAddChip(chip)}\n                    onDelete={(chip, index) => handleDeleteChip(chip, index)}\n                  />\n                  {/*<Chip label=\"Add tag\" color=\"primary\" clickable/>*/}\n                </Grid>\n\n                <Grid item container justify=\"center\" xs={12} spacing={3}>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" type=\"submit\">\n                          SAVE\n                      </Button>\n                    </Grid>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" onClick={props.onClose}>\n                          CLOSE\n                      </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n\n    return (\n        <Modal\n            open={props.open}\n            onClose={props.onClose}\n        >\n            {body}\n        </Modal>\n    );\n}\n\nexport default TaskEditModal\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskEditModal from './TaskEditModal'\nimport Chip from '@material-ui/core/Chip';\nimport App from '../App';\n\ninterface TaskListItemProps {\n  app: App\n  task: Task\n}\n\ninterface TaskListItemState {\n  editFormOpen: boolean\n}\n\nclass TaskListItem extends React.Component<TaskListItemProps, TaskListItemState> {\n  constructor(props: TaskListItemProps) {\n    super(props)\n    this.state = {\n      editFormOpen: false\n    }\n    this.handleEditFormOpen = this.handleEditFormOpen.bind(this)\n    this.handleEditFormClose = this.handleEditFormClose.bind(this)\n  }\n\n  handleEditFormOpen() {\n    this.setState({editFormOpen: true})\n  }\n\n  handleEditFormClose() {\n    this.setState({editFormOpen: false})\n  }\n\n  handleTaskDelete(event:React.MouseEvent<HTMLButtonElement>, id: number) {\n    event.preventDefault();\n    this.props.app.axios.delete(`/tasks/${id}`)\n       .then((result: any) => {\n           // update tasks in App component\n           this.props.app.removeTask(result.data)\n       })\n       .catch((data: any) => {\n           console.log(data);\n       });\n  }\n\n  render() {\n    const hasTags = this.props.task.tags\n    let tags\n    if (hasTags) {\n      tags = this.props.task.tags.map( (tag: any) => (\n          <Chip key={tag.id} label={tag.name}/>\n      ))\n    }\n    return (\n      <ListItem button>\n        <ListItemText primary={this.props.task.name} />\n        {tags}\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleEditFormOpen}>\n          Edit\n        </Button>\n        <TaskEditModal open={this.state.editFormOpen} onClose={this.handleEditFormClose}\n          task={this.props.task} app={this.props.app}/>\n\n        <Button variant=\"contained\" color=\"primary\"\n          onClick={(event) => this.handleTaskDelete(event, this.props.task.id)} >\n          Delete\n        </Button>\n      </ListItem>\n     )\n   }\n\n}\n\nexport default TaskListItem;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskListItem from './TaskListItem'\nimport App from '../App';\n\n\ninterface TaskListProps {\n  app: App\n}\n\nclass TaskList extends React.Component<TaskListProps, any> {\n  constructor(props: TaskListProps) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <List>\n        { this.props.app.state.filtered_tasks.map( (task: Task) => (\n            <TaskListItem  key={task.id}　app={this.props.app} task={task} />\n          )) }\n       </List>\n     )\n   }\n\n}\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport { Task, Tag } from './Types'\nimport SearchBar from \"material-ui-search-bar\";\n\ninterface TaskSearchBarProps {\n  tasks: Task[]\n  setFilteredTasks: any\n}\n\nfunction TaskSearchBar(props: TaskSearchBarProps) {\n  const [keyword, setKeyWord] = useState(\"\")\n\n  const handleChange = (newValue: string) => {\n    setKeyWord(newValue)\n    handleSearch(newValue)\n  }\n\n  const handleSearch = (keyword: string) => {\n    let tasks = props.tasks.slice()\n    // case-insensitive search, search tasks that have matching tag\n    if (keyword != \"\") {\n      tasks = tasks.filter((task) => hasMatchingTag(task.tags, keyword))\n    }\n    props.setFilteredTasks(tasks)\n  }\n\n  const hasMatchingTag = (tags: Tag[], keyword: string) => {\n    return tags.some((tag) => {\n      return tag.name.toLowerCase().includes(keyword.toLowerCase())\n    })\n  }\n\n  const handleCancelSearch = () => {\n    props.setFilteredTasks(props.tasks)\n  }\n\n  return (\n    <div>\n      Search by tag:\n      <SearchBar\n        value={keyword}\n        onChange={handleChange}\n        onCancelSearch={handleCancelSearch}\n      />\n    </div>\n  )\n}\n\nexport default TaskSearchBar\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskForm from './components/TaskForm'\nimport TaskList from './components/TaskList'\nimport TaskSearchBar from './components/TaskSearchBar'\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport { Task } from './components/Types'\n\ninterface State {\n  tasks: Task[]\n  filtered_tasks: Task[]\n}\n\nclass App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      tasks: [],\n      filtered_tasks: []\n    }\n    this.setTasks = this.setTasks.bind(this)\n    this.setFilteredTasks = this.setFilteredTasks.bind(this)\n  }\n\n  setTasks(tasks: Task[]) {\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  setFilteredTasks(filtered_tasks: Task[]) {\n    this.setState({\n      filtered_tasks: filtered_tasks\n    })\n  }\n\n  addTask(task: Task) {\n    // update tasks\n    let tasks = this.state.tasks.slice()\n    tasks.push(task)\n    this.setTasks(tasks)\n    // update filtered tasks\n    let filtered_tasks = this.state.filtered_tasks.slice()\n    filtered_tasks.push(task)\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n  updateTask(targetTask: Task) {\n    // update tasks\n    const tasks = this.state.tasks.slice();\n    let targetIndex = tasks.findIndex(task => task.id === targetTask.id);\n    tasks.splice(targetIndex, 1, targetTask);\n    this.setTasks(tasks)\n    // update filtered tasks\n    const filtered_tasks = this.state.filtered_tasks.slice();\n    targetIndex = filtered_tasks.findIndex(task => task.id === targetTask.id);\n    filtered_tasks.splice(targetIndex, 1, targetTask);\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n  removeTask(targetTask: Task) {\n    // update tasks\n    const tasks = this.state.tasks.slice()\n    let targetIndex = tasks.findIndex(task => task.id === targetTask.id)\n    tasks.splice(targetIndex, 1)\n    this.setTasks(tasks)\n    // update filtered tasks\n    const filtered_tasks = this.state.filtered_tasks.slice();\n    targetIndex = filtered_tasks.findIndex(task => task.id === targetTask.id)\n    filtered_tasks.splice(targetIndex, 1)\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n\n  get axios() {\n       const axiosBase = require('axios');\n       return axiosBase.create({\n           baseURL: process.env.REACT_APP_DEV_API_URL,\n           headers: {\n               'Content-Type': 'application/json',\n               'X-Requested-With': 'XMLHttpRequest'\n           },\n           responseType: 'json'\n       });\n   }\n\n   // get tasks when app is first shown(= when component mounted)\n  componentDidMount() {\n   this.axios.get('/tasks')\n      .then((results: any) => {\n          console.log(results);\n          this.setState({\n              tasks: results.data,\n              filtered_tasks: results.data\n          });\n      })\n      .catch((data: any) => {\n          console.log(data);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Box color=\"text.primary\">\n          <h1 className=\"siimple-box-title siimple--color-white\">React Todo App</h1>\n          <TaskForm app={this} />\n          <div className=\"siimple-rule\"></div>\n          <TaskSearchBar tasks={this.state.tasks} setFilteredTasks={this.setFilteredTasks}/>\n          <TaskList app={this} />\n        </Box>\n      </div>\n      )\n    }\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}