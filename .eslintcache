[{"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx":"1","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts":"2","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx":"3","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx":"4","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx":"5","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditModal.tsx":"6","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx":"7","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts":"8","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx":"9"},{"size":500,"mtime":1607525412762,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1607525412763,"results":"12","hashOfConfig":"11"},{"size":3654,"mtime":1610971580774,"results":"13","hashOfConfig":"11"},{"size":3242,"mtime":1610971580775,"results":"14","hashOfConfig":"11"},{"size":867,"mtime":1610971580776,"results":"15","hashOfConfig":"11"},{"size":4515,"mtime":1610971580775,"results":"16","hashOfConfig":"11"},{"size":2480,"mtime":1610971580777,"results":"17","hashOfConfig":"11"},{"size":127,"mtime":1610629443225,"results":"18","hashOfConfig":"11"},{"size":1144,"mtime":1610898099407,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dc9g33",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx",[],["44","45"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx",["46","47","48","49","50"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx",["51","52","53","54","55","56","57","58","59","60"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { Task, Tag } from './Types'\nimport ChipInput from 'material-ui-chip-input'\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\nimport { sizing } from '@material-ui/system';\nimport LabelRoundedIcon from '@material-ui/icons/LabelRounded';\nimport Box from '@material-ui/core/Box';\n\ninterface TaskFormProps {\n  app: App\n}\n\nfunction TaskForm(props: TaskFormProps) {\n  const tags : Tag[] = []\n  const [state, setState] = useState({\n      name: \"\",\n      tags_attributes: tags\n  })\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .required('Name is required'),\n  })\n\n  const handleSubmit = (values: any, {resetForm}: any) => {\n      props.app.axios.post(\"/tasks\", {\n          task: values,\n      })\n          .then((result: any) => {\n              // update tasks in App component\n              props.app.addTask(result.data)\n              // set input value back to null\n              resetForm()\n              const tags : Tag[] = []\n              formik.setFieldValue(\"tags_attributes\", tags, true)\n          })\n          .catch((data: any) => {\n              console.log(data)\n          })\n  }\n\n  const formik = useFormik({\n    initialValues: state,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  })\n\n  const handleAddChip = (chip: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.push({name: chip})\n    // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n    console.log(formik.values)\n  }\n  const handleDeleteChip = (chip: any, index: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.splice(index, 1)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n  }\n\n  return (\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2} justify=\"center\"\n          alignItems=\"center\" direction=\"row\">\n            <Grid item>\n              <TextField id=\"outlined-basic\" variant=\"outlined\"\n                name=\"name\" label=\"Task Name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n                fullWidth={true}\n              />\n            </Grid>\n\n            <Grid item>\n              <ChipInput label=\"Tags\"\n                value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                onAdd={chip => handleAddChip(chip)}\n                onDelete={(chip, index) => handleDeleteChip(chip, index)}\n              />\n            </Grid>\n\n            <Grid item>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                fullWidth={true}>\n                Create new task\n              </Button>\n            </Grid>\n        </Grid>\n      </form>\n    )\n}\n\nexport default TaskForm;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx",["61","62","63","64","65","66"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskListItem from './TaskListItem'\nimport App from '../App';\nimport Box from '@material-ui/core/Box';\n\n\ninterface TaskListProps {\n  app: App\n}\n\nclass TaskList extends React.Component<TaskListProps, any> {\n  constructor(props: TaskListProps) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <List>\n        { this.props.app.state.filtered_tasks.map( (task: Task) => (\n              <TaskListItem  key={task.id}　app={this.props.app} task={task}/>\n          )) }\n       </List>\n     )\n   }\n\n}\n\nexport default TaskList;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditModal.tsx",["67","68","69","70","71"],"import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ChipInput from 'material-ui-chip-input'\nimport Box from '@material-ui/core/Box';\nimport { Task } from './Types'\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    {/*const top = 50 + rand();\n    const left = 50 + rand();*/}\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 500,\n        height: 500,\n        backgroundColor: \"#d9ded9\",\n        border: '0.5px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\ninterface TaskEditModalProps {\n  open: boolean\n  onClose: any\n  task: Task\n  app: App\n}\n\nfunction TaskEditModal(props: TaskEditModalProps) {\n    const classes = useStyles();\n    const modalStyle = getModalStyle();\n    const [state, setState] = useState({\n      name: props.task.name,\n      tags_attributes: props.task.tags\n    })\n\n    const validationSchema = Yup.object().shape({\n      name: Yup.string()\n          .required('Name is required'),\n    });\n\n\n    const handleSubmit = (values: any, {resetForm}: any) => {\n          props.app.axios.patch(`/tasks/${props.task.id}`, {\n              task: values\n          })\n              .then((results: any) => {\n                  // update tasks in app\n                  props.app.updateTask(results.data)\n              })\n              .catch((data: any) => {\n                  console.log(data);\n              })\n    }\n\n    const formik = useFormik({\n      initialValues: state,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit\n    })\n\n    const handleAddChip = (chip: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.push({name: chip})\n      // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n      console.log(formik.values)\n    }\n    const handleDeleteChip = (chip: any, index: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.splice(index, 1)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n    }\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <form onSubmit={formik.handleSubmit}>\n                <Box mb={4} justifyContent=\"center\">\n                    <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                      name=\"name\" label=\"Task Name\"\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                      error={formik.touched.name && Boolean(formik.errors.name)}\n                      helperText={formik.touched.name && formik.errors.name}\n                    />\n                </Box>\n\n                <Grid item xs={12}>\n                  <ChipInput label=\"Tags\"\n                    value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                    onAdd={chip => handleAddChip(chip)}\n                    onDelete={(chip, index) => handleDeleteChip(chip, index)}\n                  />\n                  {/*<Chip label=\"Add tag\" color=\"primary\" clickable/>*/}\n                </Grid>\n\n                <Grid item container justify=\"center\" xs={12} spacing={3}>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" type=\"submit\">\n                          SAVE\n                      </Button>\n                    </Grid>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" onClick={props.onClose}>\n                          CLOSE\n                      </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n\n    return (\n        <Modal\n            open={props.open}\n            onClose={props.onClose}\n        >\n            {body}\n        </Modal>\n    );\n}\n\nexport default TaskEditModal\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx",["72","73","74","75","76"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskEditModal from './TaskEditModal'\nimport Chip from '@material-ui/core/Chip';\nimport App from '../App';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport Box from '@material-ui/core/Box';\n\n\ninterface TaskListItemProps {\n  app: App\n  task: Task\n}\n\ninterface TaskListItemState {\n  editFormOpen: boolean\n}\n\nclass TaskListItem extends React.Component<TaskListItemProps, TaskListItemState> {\n  constructor(props: TaskListItemProps) {\n    super(props)\n    this.state = {\n      editFormOpen: false\n    }\n    this.handleEditFormOpen = this.handleEditFormOpen.bind(this)\n    this.handleEditFormClose = this.handleEditFormClose.bind(this)\n  }\n\n  handleEditFormOpen() {\n    this.setState({editFormOpen: true})\n  }\n\n  handleEditFormClose() {\n    this.setState({editFormOpen: false})\n  }\n\n  handleTaskDelete(event:React.MouseEvent<HTMLButtonElement>, id: number) {\n    event.preventDefault();\n    this.props.app.axios.delete(`/tasks/${id}`)\n       .then((result: any) => {\n           // update tasks in App component\n           this.props.app.removeTask(result.data)\n       })\n       .catch((data: any) => {\n           console.log(data);\n       });\n  }\n\n  render() {\n    const hasTags = this.props.task.tags\n    let tags\n    if (hasTags) {\n      tags = this.props.task.tags.map( (tag: any) => (\n        <Box m={1}>\n          <Chip key={tag.id} label={tag.name}/>\n        </Box>\n      ))\n    }\n    return (\n      <ListItem button>\n        <ListItemText primary={this.props.task.name} />\n        {tags}\n\n        <IconButton color=\"primary\" onClick={this.handleEditFormOpen}>\n          <EditRoundedIcon />\n        </IconButton>\n        <TaskEditModal open={this.state.editFormOpen} onClose={this.handleEditFormClose}\n          task={this.props.task} app={this.props.app}/>\n\n        <IconButton color=\"secondary\"\n          onClick={(event) => this.handleTaskDelete(event, this.props.task.id)} >\n          <DeleteRoundedIcon />\n        </IconButton>\n      </ListItem>\n     )\n   }\n\n}\n\nexport default TaskListItem;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx",["77"],"import React, { useState } from 'react';\nimport { Task, Tag } from './Types'\nimport SearchBar from \"material-ui-search-bar\";\n\ninterface TaskSearchBarProps {\n  tasks: Task[]\n  setFilteredTasks: any\n}\n\nfunction TaskSearchBar(props: TaskSearchBarProps) {\n  const [keyword, setKeyWord] = useState(\"\")\n\n  const handleChange = (newValue: string) => {\n    setKeyWord(newValue)\n    handleSearch(newValue)\n  }\n\n  const handleSearch = (keyword: string) => {\n    let tasks = props.tasks.slice()\n    // case-insensitive search, search tasks that have matching tag\n    if (keyword != \"\") {\n      tasks = tasks.filter((task) => hasMatchingTag(task.tags, keyword))\n    }\n    props.setFilteredTasks(tasks)\n  }\n\n  const hasMatchingTag = (tags: Tag[], keyword: string) => {\n    return tags.some((tag) => {\n      return tag.name.toLowerCase().includes(keyword.toLowerCase())\n    })\n  }\n\n  const handleCancelSearch = () => {\n    props.setFilteredTasks(props.tasks)\n  }\n\n  return (\n    <div>\n      <SearchBar\n        value={keyword}\n        onChange={handleChange}\n        onCancelSearch={handleCancelSearch}\n      />\n    </div>\n  )\n}\n\nexport default TaskSearchBar\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":12},{"ruleId":"82","severity":1,"message":"86","line":8,"column":8,"nodeType":"84","messageId":"85","endLine":8,"endColumn":13},{"ruleId":"82","severity":1,"message":"87","line":10,"column":10,"nodeType":"84","messageId":"85","endLine":10,"endColumn":20},{"ruleId":"82","severity":1,"message":"88","line":12,"column":8,"nodeType":"84","messageId":"85","endLine":12,"endColumn":11},{"ruleId":"82","severity":1,"message":"89","line":13,"column":8,"nodeType":"84","messageId":"85","endLine":13,"endColumn":12},{"ruleId":"82","severity":1,"message":"90","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":18},{"ruleId":"82","severity":1,"message":"91","line":6,"column":10,"nodeType":"84","messageId":"85","endLine":6,"endColumn":14},{"ruleId":"82","severity":1,"message":"92","line":8,"column":21,"nodeType":"84","messageId":"85","endLine":8,"endColumn":31},{"ruleId":"82","severity":1,"message":"93","line":8,"column":33,"nodeType":"84","messageId":"85","endLine":8,"endColumn":38},{"ruleId":"82","severity":1,"message":"94","line":11,"column":10,"nodeType":"84","messageId":"85","endLine":11,"endColumn":16},{"ruleId":"82","severity":1,"message":"95","line":12,"column":8,"nodeType":"84","messageId":"85","endLine":12,"endColumn":24},{"ruleId":"82","severity":1,"message":"96","line":13,"column":8,"nodeType":"84","messageId":"85","endLine":13,"endColumn":11},{"ruleId":"82","severity":1,"message":"97","line":15,"column":8,"nodeType":"84","messageId":"85","endLine":15,"endColumn":25},{"ruleId":"82","severity":1,"message":"98","line":16,"column":8,"nodeType":"84","messageId":"85","endLine":16,"endColumn":18},{"ruleId":"82","severity":1,"message":"99","line":24,"column":17,"nodeType":"84","messageId":"85","endLine":24,"endColumn":25},{"ruleId":"82","severity":1,"message":"100","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":16},{"ruleId":"82","severity":1,"message":"101","line":3,"column":20,"nodeType":"84","messageId":"85","endLine":3,"endColumn":33},{"ruleId":"82","severity":1,"message":"102","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":20},{"ruleId":"82","severity":1,"message":"103","line":5,"column":8,"nodeType":"84","messageId":"85","endLine":5,"endColumn":20},{"ruleId":"82","severity":1,"message":"104","line":6,"column":8,"nodeType":"84","messageId":"85","endLine":6,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":19,"column":3,"nodeType":"107","messageId":"108","endLine":21,"endColumn":4},{"ruleId":"82","severity":1,"message":"92","line":10,"column":21,"nodeType":"84","messageId":"85","endLine":10,"endColumn":31},{"ruleId":"82","severity":1,"message":"93","line":10,"column":33,"nodeType":"84","messageId":"85","endLine":10,"endColumn":38},{"ruleId":"82","severity":1,"message":"109","line":14,"column":10,"nodeType":"84","messageId":"85","endLine":14,"endColumn":14},{"ruleId":"110","severity":1,"message":"111","line":19,"column":5,"nodeType":"112","messageId":"113","endLine":20,"endColumn":33},{"ruleId":"82","severity":1,"message":"99","line":53,"column":19,"nodeType":"84","messageId":"85","endLine":53,"endColumn":27},{"ruleId":"82","severity":1,"message":"114","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":12},{"ruleId":"82","severity":1,"message":"101","line":3,"column":20,"nodeType":"84","messageId":"85","endLine":3,"endColumn":33},{"ruleId":"82","severity":1,"message":"102","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":20},{"ruleId":"82","severity":1,"message":"104","line":6,"column":8,"nodeType":"84","messageId":"85","endLine":6,"endColumn":14},{"ruleId":"82","severity":1,"message":"115","line":15,"column":8,"nodeType":"84","messageId":"85","endLine":15,"endColumn":13},{"ruleId":"116","severity":1,"message":"117","line":21,"column":17,"nodeType":"118","messageId":"119","endLine":21,"endColumn":19},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'withStyles' is defined but never used.","'red' is defined but never used.","'blue' is defined but never used.","'InputLabel' is defined but never used.","'Task' is defined but never used.","'FieldArray' is defined but never used.","'Field' is defined but never used.","'sizing' is defined but never used.","'LabelRoundedIcon' is defined but never used.","'Box' is defined but never used.","'AddBoxRoundedIcon' is defined but never used.","'IconButton' is defined but never used.","'setState' is assigned a value but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'rand' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'List' is defined but never used.","'Paper' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]