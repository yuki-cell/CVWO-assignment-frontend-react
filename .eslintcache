[{"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx":"1","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts":"2","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx":"3","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx":"4","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx":"5","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditModal.tsx":"6","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx":"7","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts":"8","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx":"9"},{"size":500,"mtime":1607525412762,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1607525412763,"results":"12","hashOfConfig":"11"},{"size":3322,"mtime":1610783515029,"results":"13","hashOfConfig":"11"},{"size":3173,"mtime":1610782442347,"results":"14","hashOfConfig":"11"},{"size":825,"mtime":1610782980707,"results":"15","hashOfConfig":"11"},{"size":4515,"mtime":1610783387824,"results":"16","hashOfConfig":"11"},{"size":2212,"mtime":1610783528308,"results":"17","hashOfConfig":"11"},{"size":127,"mtime":1610629443225,"results":"18","hashOfConfig":"11"},{"size":1165,"mtime":1610783913607,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dc9g33",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"22"},"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx",[],["46","47"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx",["48","49"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskForm from './components/TaskForm'\nimport TaskList from './components/TaskList'\nimport TaskSearchBar from './components/TaskSearchBar'\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport { Task } from './components/Types'\n\ninterface State {\n  tasks: Task[]\n  filtered_tasks: Task[]\n}\n\nclass App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      tasks: [],\n      filtered_tasks: []\n    }\n    this.setTasks = this.setTasks.bind(this)\n    this.setFilteredTasks = this.setFilteredTasks.bind(this)\n  }\n\n  setTasks(tasks: Task[]) {\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  setFilteredTasks(filtered_tasks: Task[]) {\n    this.setState({\n      filtered_tasks: filtered_tasks\n    })\n  }\n\n  addTask(task: Task) {\n    // update tasks\n    let tasks = this.state.tasks.slice()\n    tasks.push(task)\n    this.setTasks(tasks)\n    // update filtered tasks\n    let filtered_tasks = this.state.filtered_tasks.slice()\n    filtered_tasks.push(task)\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n  updateTask(targetTask: Task) {\n    // update tasks\n    const tasks = this.state.tasks.slice();\n    let targetIndex = tasks.findIndex(task => task.id === targetTask.id);\n    tasks.splice(targetIndex, 1, targetTask);\n    this.setTasks(tasks)\n    // update filtered tasks\n    const filtered_tasks = this.state.filtered_tasks.slice();\n    targetIndex = filtered_tasks.findIndex(task => task.id === targetTask.id);\n    filtered_tasks.splice(targetIndex, 1, targetTask);\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n  removeTask(targetTask: Task) {\n    // update tasks\n    const tasks = this.state.tasks.slice()\n    let targetIndex = tasks.findIndex(task => task.id === targetTask.id)\n    tasks.splice(targetIndex, 1)\n    this.setTasks(tasks)\n    // update filtered tasks\n    const filtered_tasks = this.state.filtered_tasks.slice();\n    targetIndex = filtered_tasks.findIndex(task => task.id === targetTask.id)\n    filtered_tasks.splice(targetIndex, 1)\n    this.setFilteredTasks(filtered_tasks)\n  }\n\n\n  get axios() {\n       const axiosBase = require('axios');\n       return axiosBase.create({\n           baseURL: process.env.REACT_APP_DEV_API_URL,\n           headers: {\n               'Content-Type': 'application/json',\n               'X-Requested-With': 'XMLHttpRequest'\n           },\n           responseType: 'json'\n       });\n   }\n\n   // get tasks when app is first shown(= when component mounted)\n  componentDidMount() {\n   this.axios.get('/tasks')\n      .then((results: any) => {\n          console.log(results);\n          this.setState({\n              tasks: results.data,\n              filtered_tasks: results.data\n          });\n      })\n      .catch((data: any) => {\n          console.log(data);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Box color=\"text.primary\">\n          <h1 className=\"siimple-box-title siimple--color-white\">React Todo App</h1>\n          <TaskForm app={this} />\n          <div className=\"siimple-rule\"></div>\n          <TaskSearchBar tasks={this.state.tasks} setFilteredTasks={this.setFilteredTasks}/>\n          <TaskList app={this} />\n        </Box>\n      </div>\n      )\n    }\n\n}\n\nexport default App;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx",["50","51","52","53"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { Task, Tag } from './Types'\nimport ChipInput from 'material-ui-chip-input'\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\n\ninterface TaskFormProps {\n  app: App\n}\n\nfunction TaskForm(props: TaskFormProps) {\n  const tags : Tag[] = []\n  const [state, setState] = useState({\n      name: \"\",\n      tags_attributes: tags\n  })\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .required('Name is required'),\n  })\n\n  const handleSubmit = (values: any, {resetForm}: any) => {\n      props.app.axios.post(\"/tasks\", {\n          task: values,\n      })\n          .then((result: any) => {\n              // update tasks in App component\n              props.app.addTask(result.data)\n              // set input value back to null\n              resetForm()\n              const tags : Tag[] = []\n              formik.setFieldValue(\"tags_attributes\", tags, true)\n          })\n          .catch((data: any) => {\n              console.log(data)\n          })\n  }\n\n  const formik = useFormik({\n    initialValues: state,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  })\n\n  const handleAddChip = (chip: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.push({name: chip})\n    // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n    console.log(formik.values)\n  }\n  const handleDeleteChip = (chip: any, index: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.splice(index, 1)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n  }\n\n  return (\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <InputLabel>Your todo:</InputLabel>\n            </Grid>\n\n            <Grid item xs={12}>\n              <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                name=\"name\" label=\"Task Name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <ChipInput label=\"Tags\"\n                value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                onAdd={chip => handleAddChip(chip)}\n                onDelete={(chip, index) => handleDeleteChip(chip, index)}\n              />\n              {/*<Chip label=\"Add tag\" color=\"primary\" clickable/>*/}\n            </Grid>\n\n            <Grid item xs={12}>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" >\n                Create new task\n              </Button>\n            </Grid>\n        </Grid>\n      </form>\n    )\n}\n\nexport default TaskForm;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx",["54","55","56","57","58","59"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskListItem from './TaskListItem'\nimport App from '../App';\n\n\ninterface TaskListProps {\n  app: App\n}\n\nclass TaskList extends React.Component<TaskListProps, any> {\n  constructor(props: TaskListProps) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <List>\n        { this.props.app.state.filtered_tasks.map( (task: Task) => (\n            <TaskListItem  key={task.id}　app={this.props.app} task={task} />\n          )) }\n       </List>\n     )\n   }\n\n}\n\nexport default TaskList;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditModal.tsx",["60","61","62","63","64"],"import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ChipInput from 'material-ui-chip-input'\nimport Box from '@material-ui/core/Box';\nimport { Task } from './Types'\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    {/*const top = 50 + rand();\n    const left = 50 + rand();*/}\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 500,\n        height: 500,\n        backgroundColor: \"#d9ded9\",\n        border: '0.5px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\ninterface TaskEditModalProps {\n  open: boolean\n  onClose: any\n  tasks: Task[]\n  task: Task\n  axios: any\n  setTasks: any\n}\n\nfunction TaskEditModal(props: TaskEditModalProps) {\n    const classes = useStyles();\n    const modalStyle = getModalStyle();\n    const [state, setState] = useState({\n      name: props.task.name,\n      tags_attributes: props.task.tags\n    })\n\n    const validationSchema = Yup.object().shape({\n      name: Yup.string()\n          .required('Name is required'),\n    });\n\n\n    const handleSubmit = (values: any, {resetForm}: any) => {\n          props.axios.patch(`/tasks/${props.task.id}`, {\n              task: values\n          })\n              .then((results: any) => {\n                  const tasks = props.tasks.slice();\n                  const index = tasks.findIndex(task => task[\"id\"] === props.task.id);\n                  tasks.splice(index, 1, results[\"data\"]);\n                  props.setTasks(tasks)\n              })\n              .catch((data: any) => {\n                  console.log(data);\n              })\n    }\n\n    const formik = useFormik({\n      initialValues: state,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit\n    })\n\n    const handleAddChip = (chip: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.push({name: chip})\n      // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n      console.log(formik.values)\n    }\n    const handleDeleteChip = (chip: any, index: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.splice(index, 1)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n    }\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <form onSubmit={formik.handleSubmit}>\n                <Box mb={4} justifyContent=\"center\">\n                    <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                      name=\"name\" label=\"Task Name\"\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                      error={formik.touched.name && Boolean(formik.errors.name)}\n                      helperText={formik.touched.name && formik.errors.name}\n                    />\n                </Box>\n\n                <Grid item xs={12}>\n                  <ChipInput label=\"Tags\"\n                    value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                    onAdd={chip => handleAddChip(chip)}\n                    onDelete={(chip, index) => handleDeleteChip(chip, index)}\n                  />\n                  {/*<Chip label=\"Add tag\" color=\"primary\" clickable/>*/}\n                </Grid>\n\n                <Grid item container justify=\"center\" xs={12} spacing={3}>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" type=\"submit\">\n                          SAVE\n                      </Button>\n                    </Grid>\n                    <Grid item container xs={4} justify=\"center\">\n                      <Button size=\"small\" variant=\"contained\" onClick={props.onClose}>\n                          CLOSE\n                      </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n\n    return (\n        <Modal\n            open={props.open}\n            onClose={props.onClose}\n        >\n            {body}\n        </Modal>\n    );\n}\n\nexport default TaskEditModal\n",["65","66"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx",["67","68","69"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskEditModal from './TaskEditModal'\nimport Chip from '@material-ui/core/Chip';\nimport App from '../App';\n\ninterface TaskListItemProps {\n  app: App\n  task: Task\n}\n\ninterface TaskListItemState {\n  editFormOpen: boolean\n}\n\nclass TaskListItem extends React.Component<TaskListItemProps, TaskListItemState> {\n  constructor(props: TaskListItemProps) {\n    super(props)\n    this.state = {\n      editFormOpen: false\n    }\n    this.handleEditFormOpen = this.handleEditFormOpen.bind(this)\n    this.handleEditFormClose = this.handleEditFormClose.bind(this)\n  }\n\n  handleEditFormOpen() {\n    this.setState({editFormOpen: true})\n  }\n\n  handleEditFormClose() {\n    this.setState({editFormOpen: false})\n  }\n\n  handleTaskDelete(event:React.MouseEvent<HTMLButtonElement>, id: number) {\n    event.preventDefault();\n    this.props.app.axios.delete(`/tasks/${id}`)\n       .then((result: any) => {\n           // update tasks in App component\n           this.props.app.removeTask(result.data)\n       })\n       .catch((data: any) => {\n           console.log(data);\n       });\n  }\n\n  render() {\n    const hasTags = this.props.task.tags\n    let tags\n    if (hasTags) {\n      tags = this.props.task.tags.map( (tag: any) => (\n          <Chip key={tag.id} label={tag.name}/>\n      ))\n    }\n    return (\n      <ListItem button>\n        <ListItemText primary={this.props.task.name} />\n        {tags}\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleEditFormOpen}>\n          Edit\n        </Button>\n        <TaskEditModal open={this.state.editFormOpen} onClose={this.handleEditFormClose}\n          task={this.props.task} app={this.props.app}/>\n\n        <Button variant=\"contained\" color=\"primary\"\n          onClick={(event) => this.handleTaskDelete(event, this.props.task.id)} >\n          Delete\n        </Button>\n      </ListItem>\n     )\n   }\n\n}\n\nexport default TaskListItem;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx",["70"],"import React, { useState } from 'react';\nimport { Task, Tag } from './Types'\nimport SearchBar from \"material-ui-search-bar\";\n\ninterface TaskSearchBarProps {\n  tasks: Task[]\n  setFilteredTasks: any\n}\n\nfunction TaskSearchBar(props: TaskSearchBarProps) {\n  const [keyword, setKeyWord] = useState(\"\")\n\n  const handleChange = (newValue: string) => {\n    setKeyWord(newValue)\n    handleSearch(newValue)\n  }\n\n  const handleSearch = (keyword: string) => {\n    let tasks = props.tasks.slice()\n    // case-insensitive search, search tasks that have matching tag\n    if (keyword != \"\") {\n      tasks = tasks.filter((task) => hasMatchingTag(task.tags, keyword))\n    }\n    props.setFilteredTasks(tasks)\n  }\n\n  const hasMatchingTag = (tags: Tag[], keyword: string) => {\n    return tags.some((tag) => {\n      return tag.name.toLowerCase().includes(keyword.toLowerCase())\n    })\n  }\n\n  const handleCancelSearch = () => {\n    props.setFilteredTasks(props.tasks)\n  }\n\n  return (\n    <div>\n      Search by tag:\n      <SearchBar\n        value={keyword}\n        onChange={handleChange}\n        onCancelSearch={handleCancelSearch}\n      />\n    </div>\n  )\n}\n\nexport default TaskSearchBar\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"75","severity":1,"message":"79","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":13},{"ruleId":"75","severity":1,"message":"80","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":14},{"ruleId":"75","severity":1,"message":"81","line":8,"column":21,"nodeType":"77","messageId":"78","endLine":8,"endColumn":31},{"ruleId":"75","severity":1,"message":"82","line":8,"column":33,"nodeType":"77","messageId":"78","endLine":8,"endColumn":38},{"ruleId":"75","severity":1,"message":"83","line":18,"column":17,"nodeType":"77","messageId":"78","endLine":18,"endColumn":25},{"ruleId":"75","severity":1,"message":"84","line":3,"column":8,"nodeType":"77","messageId":"78","endLine":3,"endColumn":16},{"ruleId":"75","severity":1,"message":"85","line":3,"column":20,"nodeType":"77","messageId":"78","endLine":3,"endColumn":33},{"ruleId":"75","severity":1,"message":"86","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":20},{"ruleId":"75","severity":1,"message":"87","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":20},{"ruleId":"75","severity":1,"message":"88","line":6,"column":8,"nodeType":"77","messageId":"78","endLine":6,"endColumn":14},{"ruleId":"89","severity":1,"message":"90","line":17,"column":3,"nodeType":"91","messageId":"92","endLine":19,"endColumn":4},{"ruleId":"75","severity":1,"message":"81","line":10,"column":21,"nodeType":"77","messageId":"78","endLine":10,"endColumn":31},{"ruleId":"75","severity":1,"message":"82","line":10,"column":33,"nodeType":"77","messageId":"78","endLine":10,"endColumn":38},{"ruleId":"75","severity":1,"message":"93","line":13,"column":10,"nodeType":"77","messageId":"78","endLine":13,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":18,"column":5,"nodeType":"96","messageId":"97","endLine":19,"endColumn":33},{"ruleId":"75","severity":1,"message":"83","line":54,"column":19,"nodeType":"77","messageId":"78","endLine":54,"endColumn":27},{"ruleId":"71","replacedBy":"98"},{"ruleId":"73","replacedBy":"99"},{"ruleId":"75","severity":1,"message":"100","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"75","severity":1,"message":"85","line":3,"column":20,"nodeType":"77","messageId":"78","endLine":3,"endColumn":33},{"ruleId":"75","severity":1,"message":"86","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":21,"column":17,"nodeType":"103","messageId":"104","endLine":21,"endColumn":19},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Task' is defined but never used.","'FieldArray' is defined but never used.","'Field' is defined but never used.","'setState' is assigned a value but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'rand' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["105"],["106"],"'List' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]