[{"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx":"1","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts":"2","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx":"3","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx":"4","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx":"5","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx":"6","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts":"7","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx":"8","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskApp.tsx":"9","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditDialog.tsx":"10"},{"size":500,"mtime":1607525412762,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1607525412763,"results":"13","hashOfConfig":"12"},{"size":2862,"mtime":1611125914734,"results":"14","hashOfConfig":"12"},{"size":3719,"mtime":1610983889412,"results":"15","hashOfConfig":"12"},{"size":1011,"mtime":1611125914735,"results":"16","hashOfConfig":"12"},{"size":2712,"mtime":1611125914736,"results":"17","hashOfConfig":"12"},{"size":127,"mtime":1610629443225,"results":"18","hashOfConfig":"12"},{"size":1180,"mtime":1611125914737,"results":"19","hashOfConfig":"12"},{"size":1733,"mtime":1611125914735,"results":"20","hashOfConfig":"12"},{"size":3765,"mtime":1610980670552,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"dc9g33",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/index.tsx",[],["49","50"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/reportWebVitals.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/App.tsx",["51","52"],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskForm.tsx",["53","54","55","56","57","58","59","60","61"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { Task, Tag } from './Types'\nimport ChipInput from 'material-ui-chip-input'\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\nimport { sizing } from '@material-ui/system';\nimport LabelRoundedIcon from '@material-ui/icons/LabelRounded';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport IconButton from '@material-ui/core/IconButton';\n\ninterface TaskFormProps {\n  app: App\n}\n\nfunction TaskForm(props: TaskFormProps) {\n  const tags : Tag[] = []\n  const [state, setState] = useState({\n      name: \"\",\n      tags_attributes: tags\n  })\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .required('Name is required'),\n  })\n\n  const handleSubmit = (values: any, {resetForm}: any) => {\n      props.app.axios.post(\"/tasks\", {\n          task: values,\n      })\n          .then((result: any) => {\n              // update tasks in App component\n              props.app.addTask(result.data)\n              // set input value back to null\n              resetForm()\n              const tags : Tag[] = []\n              formik.setFieldValue(\"tags_attributes\", tags, true)\n          })\n          .catch((data: any) => {\n              console.log(data)\n          })\n  }\n\n  const formik = useFormik({\n    initialValues: state,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  })\n\n  const handleAddChip = (chip: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.push({name: chip})\n    // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n    console.log(formik.values)\n  }\n  const handleDeleteChip = (chip: any, index: any) => {\n    let tags = {...formik.values}.tags_attributes\n    tags.splice(index, 1)\n    formik.setFieldValue(\"tags_attributes\", tags, true)\n  }\n\n  return (\n        <Paper>\n          <form onSubmit={formik.handleSubmit}>\n            <Box mx={2}>\n              <Grid container spacing={2} justify=\"center\"\n                alignItems=\"center\" direction=\"row\">\n                  <Grid item sm={7} xs={8}>\n                    <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                      name=\"name\" label=\"Add new task\"\n                      value={formik.values.name}\n                      onChange={formik.handleChange}\n                      error={formik.touched.name && Boolean(formik.errors.name)}\n                      helperText={formik.touched.name && formik.errors.name}\n                      fullWidth\n                    />\n                  </Grid>\n\n                  <Grid item sm={3} xs={4}>\n                    <ChipInput label=\"Tags\" size=\"small\" fullWidth\n                      value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                      onAdd={chip => handleAddChip(chip)}\n                      onDelete={(chip, index) => handleDeleteChip(chip, index)}\n                    />\n                  </Grid>\n\n                  <Grid item style={{display: \"inline-block\"}} sm={2} xs={12}>\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" fullWidth>\n                      Add\n                    </Button>\n                  </Grid>\n\n              </Grid>\n            </Box>\n          </form>\n        </Paper>\n\n    )\n}\n\nexport default TaskForm;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskList.tsx",["62","63","64","65","66"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskListItem from './TaskListItem'\nimport App from '../App';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\n\n\ninterface TaskListProps {\n  app: App\n  tasks: Task[]\n}\n\nfunction TaskList(props: TaskListProps) {\n  const body = () => {\n    const hasTasks = props.tasks.length > 0\n    if (hasTasks) {\n      return props.tasks.map( (task: Task) => (\n          <TaskListItem key={task.id} app={props.app} task={task}/>\n      ))\n    } else {\n      return <p>No task</p>\n    }\n  }\n\n  return (\n    <Box my={1}>\n      <Paper>\n        <List>\n          {body()}\n         </List>\n      </Paper>\n      <br/>\n    </Box>\n   )\n\n\n}\n\nexport default TaskList;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskListItem.tsx",["67","68","69","70","71","72","73","74","75"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport { Task } from './Types'\nimport TaskEditDialog from './TaskEditDialog'\nimport TaskDeleteDialog from './TaskDeleteDialog'\nimport SubTaskAddDialog from './SubTaskAddDialog'\nimport Chip from '@material-ui/core/Chip';\nimport App from '../App';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport TaskList from './TaskList'\nimport TaskForm from './TaskForm'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Badge from '@material-ui/core/Badge';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ninterface TaskListItemProps {\n  app: App\n  task: Task\n}\n\nfunction TaskListItem(props: TaskListItemProps) {\n  const [editFormOpen, setEditFormOpen] = React.useState(false)\n  const handleEditFormOpen = () => {\n    setEditFormOpen(true)\n  }\n  const handleEditFormClose = () => {\n    setEditFormOpen(false)\n  }\n\n  const [deleteFormOpen, setDeleteFormOpen] = React.useState(false)\n  const handleDeleteFormOpen = () => {\n    setDeleteFormOpen(true)\n  }\n  const handleDeleteFormClose = () => {\n    setDeleteFormOpen(false)\n  }\n\n\n  const [addSubTaskFormOpen, setAddSubTaskFormOpen] = React.useState(false)\n  const handleAddSubTaskFormOpen = () => {\n    setAddSubTaskFormOpen(true)\n  }\n  const handleAddSubTaskFormClose = () => {\n    setAddSubTaskFormOpen(false)\n  }\n\n  const [subTasksOpen, setSubTasksOpen] = React.useState(false)\n  const handleSubTasksToggle = () => {\n    setSubTasksOpen(!subTasksOpen)\n  }\n\n  const [isTaskCompleted, setIsTaskCompleted] = React.useState(props.task.completed)\n  const handleTaskCompleteChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsTaskCompleted(event.target.checked);\n    props.app.axios.patch(`/tasks/${props.task.id}`, {\n        task: {completed: event.target.checked}\n    })\n        .then((results: any) => {\n            // update tasks in app\n            props.app.updateTask(results.data)\n        })\n        .catch((data: any) => {\n            alert(\"Failed to check task\")\n            console.log(data);\n        })\n  };\n\n  const getTagsView = () => {\n    const hasTags = props.task.tags\n    if (hasTags) {\n      return props.task.tags.map( (tag: any) => (\n        <Box ml={1}>\n          <Chip key={tag.id} label={tag.name}/>\n        </Box>\n      ))\n    }\n  }\n\n  const getSubTasks = () => {\n    return props.app.state.filtered_tasks.filter(\n      (task) => task.parent_task_id == props.task.id\n    )\n  }\n\n  const getIncompletedSubTasks = () => {\n    const sub_tasks = props.app.state.tasks.filter(\n      (task) => task.parent_task_id == props.task.id\n    )\n    const incomplete_sub_tasks = sub_tasks.filter((task) => !(task.completed))\n    return incomplete_sub_tasks\n  }\n\n  const getShowSubTaskIcon = () => {\n    const numSubTasks = getIncompletedSubTasks().length\n    return <Tooltip title={subTasksOpen?\"hide subtasks\":`show ${numSubTasks} subtasks`}>\n            <Badge badgeContent={getIncompletedSubTasks().length} color=\"primary\">\n              <IconButton onClick={handleSubTasksToggle}>\n                {subTasksOpen?<ExpandLess />:<ExpandMore />}\n              </IconButton>\n            </Badge>\n          </Tooltip>\n  }\n\n  return (\n    <div>\n\n      {/* current task item*/}\n      <ListItem>\n        {getShowSubTaskIcon()}\n        <Checkbox checked={isTaskCompleted}\n          color=\"primary\" onChange={handleTaskCompleteChange}\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n\n        <ListItemText primary={props.task.name}/>\n        {getTagsView()}\n\n        <Tooltip title=\"add subtask\">\n          <IconButton color=\"primary\" onClick={handleAddSubTaskFormOpen}>\n            <AddBoxRoundedIcon />\n          </IconButton>\n        </Tooltip>\n        <SubTaskAddDialog open={addSubTaskFormOpen} onClose={handleAddSubTaskFormClose}\n        app={props.app} task={props.task}/>\n\n        <Tooltip title=\"edit task\">\n          <IconButton color=\"primary\" onClick={handleEditFormOpen}>\n            <EditRoundedIcon />\n          </IconButton>\n        </Tooltip>\n        <TaskEditDialog open={editFormOpen} onClose={handleEditFormClose}\n          task={props.task} app={props.app}/>\n\n        <Tooltip title=\"delete task\">\n          <IconButton color=\"secondary\" onClick={handleDeleteFormOpen}>\n            <DeleteRoundedIcon />\n          </IconButton>\n        </Tooltip>\n        <TaskDeleteDialog open={deleteFormOpen} onClose={handleDeleteFormClose}\n          task={props.task} app={props.app}/>\n\n      </ListItem>\n\n      {/*sub task items*/}\n      <Collapse in={subTasksOpen} timeout=\"auto\" unmountOnExit>\n        <div style={{marginLeft: 40, marginRight:10}}>\n          <TaskList app={props.app} tasks={getSubTasks()}/>\n        </div>\n      </Collapse>\n    </div>\n\n  )\n}\n\nexport default TaskListItem;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/Types.ts",[],"/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskSearchBar.tsx",["76","77"],"import React, { useState } from 'react';\nimport { Task, Tag } from './Types'\nimport SearchBar from \"material-ui-search-bar\";\nimport App from '../App';\n\ninterface TaskSearchBarProps {\n  tasks: Task[]\n  setFilteredTasks: any\n  app: App\n}\n\nfunction TaskSearchBar(props: TaskSearchBarProps) {\n\n  const handleChange = (newValue: string) => {\n    // update search word\n    props.app.setSearchWord(newValue)\n    // filter task\n    var filtered_task = props.app.filterTaskByTag(newValue, props.tasks)\n    props.setFilteredTasks(filtered_task)\n  }\n\n  const handleCancelSearch = () => {\n    props.setFilteredTasks(props.tasks)\n  }\n\n  return (\n    <div>\n      <SearchBar\n        placeholder=\"Search by tag\"\n        value={props.app.state.searchWord}\n        onChange={handleChange}\n        onCancelSearch={handleCancelSearch}\n      />\n    </div>\n  )\n}\n\nexport default TaskSearchBar\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskApp.tsx",["78"],"import React from 'react';\nimport '../App.css';\nimport TaskForm from './TaskForm'\nimport TaskList from './TaskList'\nimport TaskSearchBar from './TaskSearchBar'\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport red from '@material-ui/core/colors/red';\nimport blue from '@material-ui/core/colors/blue';\nimport grey from '@material-ui/core/colors/grey';\nimport App from '../App';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  redPaper: {\n    backgroundColor: red['A200']\n    // backgroundColor: grey['50']\n\n  },\n  bluePaper: {\n    backgroundColor: blue['A200']\n    // backgroundColor: grey['50']\n\n  },\n}));\n\ninterface TaskAppProps{\n  app: App\n}\n\nfunction TaskApp(props: TaskAppProps) {\n  const classes = useStyles()\n  const getParentTasks = () => {\n    return props.app.state.filtered_tasks.filter((task) => task.parent_task_id == null)\n  }\n  return (\n    <div className=\"TodoApp\">\n      <Box color=\"text.primary\" width=\"90%\" maxWidth={1300} mx={\"auto\"} mt={3}>\n        <Typography variant=\"h5\" gutterBottom\n        style={{fontFamily: 'Lato', fontWeight: 700}}>\n          React Todo App\n        </Typography>\n        <hr/>\n        <Box mb={2}>\n          <Paper elevation={3} className={classes.redPaper}>\n            <Box mx={2}>\n              <br/>\n              <TaskForm app={props.app} />\n              <br/>\n            </Box>\n          </Paper>\n        </Box>\n        <Paper elevation={3} className={classes.bluePaper}>\n          <Box mx={2}>\n            <br/>\n            <TaskSearchBar tasks={props.app.state.tasks}\n            setFilteredTasks={props.app.setFilteredTasks} app={props.app}/>\n            <TaskList app={props.app} tasks={getParentTasks()}/>\n          </Box>\n        </Paper>\n      </Box>\n    </div>\n  )\n}\n\nexport default TaskApp;\n","/Users/qiuyueyouji/Documents/cs/web/CVWO assignment/frontend-react/cvwo-todo-app-frontend/src/components/TaskEditDialog.tsx",["79","80","81","82","83","84","85","86"],"import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ChipInput from 'material-ui-chip-input'\nimport Box from '@material-ui/core/Box';\nimport { Task } from './Types'\nimport TextField from '@material-ui/core/TextField';\nimport { useFormik, FieldArray, Field} from 'formik';\nimport * as Yup from 'yup';\nimport App from '../App';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface TaskEditDialogProps {\n  open: boolean\n  onClose: any\n  task: Task\n  app: App\n}\n\nfunction TaskEditDialog(props: TaskEditDialogProps) {\n    const [state, setState] = useState({\n      name: props.task.name,\n      tags_attributes: props.task.tags\n    })\n\n    const validationSchema = Yup.object().shape({\n      name: Yup.string()\n          .required('Name is required'),\n    });\n\n\n    const handleSubmit = (values: any, {resetForm}: any) => {\n          props.app.axios.patch(`/tasks/${props.task.id}`, {\n              task: values\n          })\n              .then((results: any) => {\n                  // update tasks in app\n                  props.app.updateTask(results.data)\n                  props.onClose()\n              })\n              .catch((data: any) => {\n                  alert(\"Failed to edit\")\n                  console.log(data);\n              })\n    }\n\n    const formik = useFormik({\n      initialValues: state,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit\n    })\n\n    const handleAddChip = (chip: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.push({name: chip})\n      // initialValuesを変えてしまうからresetFormに影響を与えてしまう(resetForm uses initialValues)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n      console.log(formik.values)\n    }\n    const handleDeleteChip = (chip: any, index: any) => {\n      let tags = {...formik.values}.tags_attributes\n      tags.splice(index, 1)\n      formik.setFieldValue(\"tags_attributes\", tags, true)\n    }\n\n    return (\n          <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\n            <form onSubmit={formik.handleSubmit}>\n\n              <DialogTitle id=\"form-dialog-title\">Edit task</DialogTitle>\n              <DialogContent>\n                <TextField id=\"outlined-basic\" variant=\"outlined\" size=\"small\"\n                  fullWidth margin=\"dense\"\n                  name=\"name\" label=\"Task Name\"\n                  value={formik.values.name}\n                  onChange={formik.handleChange}\n                  error={formik.touched.name && Boolean(formik.errors.name)}\n                  helperText={formik.touched.name && formik.errors.name}\n                />\n                <ChipInput label=\"Tags\"\n                  fullWidth margin=\"dense\"\n                  value={formik.values.tags_attributes.map((tag)=>tag.name)}\n                  onAdd={chip => handleAddChip(chip)}\n                  onDelete={(chip, index) => handleDeleteChip(chip, index)}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={props.onClose} color=\"secondary\">\n                  Cancel\n                </Button>\n                <Button color=\"primary\" type=\"submit\">\n                  Save\n                </Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n\n    );\n}\n\nexport default TaskEditDialog\n",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":12},{"ruleId":"91","severity":1,"message":"95","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":13},{"ruleId":"91","severity":1,"message":"96","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":18},{"ruleId":"91","severity":1,"message":"97","line":6,"column":10,"nodeType":"93","messageId":"94","endLine":6,"endColumn":14},{"ruleId":"91","severity":1,"message":"98","line":8,"column":21,"nodeType":"93","messageId":"94","endLine":8,"endColumn":31},{"ruleId":"91","severity":1,"message":"99","line":8,"column":33,"nodeType":"93","messageId":"94","endLine":8,"endColumn":38},{"ruleId":"91","severity":1,"message":"100","line":11,"column":10,"nodeType":"93","messageId":"94","endLine":11,"endColumn":16},{"ruleId":"91","severity":1,"message":"101","line":12,"column":8,"nodeType":"93","messageId":"94","endLine":12,"endColumn":24},{"ruleId":"91","severity":1,"message":"102","line":15,"column":8,"nodeType":"93","messageId":"94","endLine":15,"endColumn":25},{"ruleId":"91","severity":1,"message":"103","line":16,"column":8,"nodeType":"93","messageId":"94","endLine":16,"endColumn":18},{"ruleId":"91","severity":1,"message":"104","line":24,"column":17,"nodeType":"93","messageId":"94","endLine":24,"endColumn":25},{"ruleId":"91","severity":1,"message":"105","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":16},{"ruleId":"91","severity":1,"message":"106","line":3,"column":20,"nodeType":"93","messageId":"94","endLine":3,"endColumn":33},{"ruleId":"91","severity":1,"message":"107","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":20},{"ruleId":"91","severity":1,"message":"108","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":20},{"ruleId":"91","severity":1,"message":"109","line":6,"column":8,"nodeType":"93","messageId":"94","endLine":6,"endColumn":14},{"ruleId":"91","severity":1,"message":"110","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":12},{"ruleId":"91","severity":1,"message":"106","line":3,"column":20,"nodeType":"93","messageId":"94","endLine":3,"endColumn":33},{"ruleId":"91","severity":1,"message":"107","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":20},{"ruleId":"91","severity":1,"message":"109","line":6,"column":8,"nodeType":"93","messageId":"94","endLine":6,"endColumn":14},{"ruleId":"91","severity":1,"message":"111","line":18,"column":8,"nodeType":"93","messageId":"94","endLine":18,"endColumn":13},{"ruleId":"91","severity":1,"message":"112","line":23,"column":8,"nodeType":"93","messageId":"94","endLine":23,"endColumn":16},{"ruleId":"91","severity":1,"message":"113","line":26,"column":8,"nodeType":"93","messageId":"94","endLine":26,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":94,"column":37,"nodeType":"116","messageId":"117","endLine":94,"endColumn":39},{"ruleId":"114","severity":1,"message":"115","line":100,"column":37,"nodeType":"116","messageId":"117","endLine":100,"endColumn":39},{"ruleId":"91","severity":1,"message":"118","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"119","line":2,"column":16,"nodeType":"93","messageId":"94","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"120","line":10,"column":8,"nodeType":"93","messageId":"94","endLine":10,"endColumn":12},{"ruleId":"91","severity":1,"message":"121","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":13},{"ruleId":"91","severity":1,"message":"122","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":12},{"ruleId":"91","severity":1,"message":"123","line":5,"column":9,"nodeType":"93","messageId":"94","endLine":5,"endColumn":19},{"ruleId":"91","severity":1,"message":"124","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":11},{"ruleId":"91","severity":1,"message":"98","line":10,"column":21,"nodeType":"93","messageId":"94","endLine":10,"endColumn":31},{"ruleId":"91","severity":1,"message":"99","line":10,"column":33,"nodeType":"93","messageId":"94","endLine":10,"endColumn":38},{"ruleId":"91","severity":1,"message":"125","line":16,"column":8,"nodeType":"93","messageId":"94","endLine":16,"endColumn":25},{"ruleId":"91","severity":1,"message":"104","line":27,"column":19,"nodeType":"93","messageId":"94","endLine":27,"endColumn":27},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'InputLabel' is defined but never used.","'Task' is defined but never used.","'FieldArray' is defined but never used.","'Field' is defined but never used.","'sizing' is defined but never used.","'LabelRoundedIcon' is defined but never used.","'AddBoxRoundedIcon' is defined but never used.","'IconButton' is defined but never used.","'setState' is assigned a value but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'Paper' is defined but never used.","'TaskForm' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'Tag' is defined but never used.","'grey' is defined but never used.","'Modal' is defined but never used.","'Grid' is defined but never used.","'makeStyles' is defined but never used.","'Box' is defined but never used.","'DialogContentText' is defined but never used.","no-global-assign","no-unsafe-negation"]